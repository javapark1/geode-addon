#!/usr/bin/env bash 

SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
. $SCRIPT_DIR/.addonenv.sh

EXECUTABLE="`basename $0`"

__options()
{
   echo "-cluster -pod -app -all -quiet -?"
}

if [ "$OPTIONS" == "true" ]; then
   __options
   exit
fi

if [ "$HELP" == "true" ]; then
cat <<EOF

WORKSPACE
   $GEODE_ADDON_WORKSPACE

NAME
   $EXECUTABLE - Create a bundle tar ball that includes the files that may have been
                 modified or added in the current geode-addon workspace

SYNOPSIS
   $EXECUTABLE [-cluster <cluster-name>] [-pod <pod-name>] [-app <app-name>] [-all] [-quiet] [-?]

DESCRIPTION
   Creates a bundle tar ball that includes the files that may have been modified or added
   in the current geode-addon workspace. The created bundle can be used as a backup, 
   for a migration to a new version of geode-addon, or for a distribution to another
   geode-addon environment.

OPTIONS
   -cluster cluster_name
             Cluster name. Bundle the following files in the specified cluster.
EOF
if [ "$MAN_SPECIFIED" == "false" ]; then
cat <<EOF
             Default: $CLUSTER
EOF
fi
cat <<EOF
        
             clusters/cluster_name/README.md
             clusters/cluster_name/bin_sh/setenv.sh
             clusters/cluster_name/etc/'*' (files only, no sub-directories)
             clusters/cluster_name/lib
             clusters/cluster_name/plugins

   -pod pod_name
             Pod name. Bundle the following files in the specified pod.

             pods/pod_name/bin_sh/setenv.sh
             pods/pod_name/etc/pod.properties
             pods/pod_name/Vagrantfile

   -app app_name
             App name. Bundle the following files in the specified app.

             apps/app_name/bin_sh/setenv.sh
             apps/app_name/etc/* (files only, no sub-directories)
             apps/app_name/lib
             apps/app_name/plugins
             apps/app_name/export

   -all
             Bundle all files including all clusters, pods and apps.

             clusters/'*'/bin_sh/setenv.sh
             clusters/'*'/etc/'*' (files only, no sub-directories)
             clusters/'*'/lib
             clusters/'*'/plugins
             apps/'*'/bin_sh/setenv.sh
             apps/'*'/etc/'*' (files only, no sub-directories)
             apps/'*'/lib
             apps/'*'/plugins
             apps/'*'/export

   -quiet
             Do not verbose.
 
EOF
if [ "$MAN_SPECIFIED" == "false" ]; then
cat <<EOF
DEFAULT
   $EXECUTABLE -cluster $CLUSTER

EOF
fi
cat <<EOF
SEE ALSO
EOF
   printSeeAlsoList "*bundle*" $EXECUTABLE
   exit
fi


#
# Override the default cluster if -cluster is not specified.
#

#
# Bundle files
#
BUNDLE_DIR=$GEODE_ADDON_WORKSPACE/bundles
if [ ! -d $BUNDLE_DIR ]; then
   mkdir -p $BUNDLE_DIR
fi

# Create the temp bundle dir where all of the files will be temporarily placed.
TMP_BUNDLE_DIR="$GEODE_ADDON_WORKSPACE/tmp/bundles"
if [ -d $TMP_BUNDLE_DIR ]; then
   rm -rf $TMP_BUNDLE_DIR
fi
mkdir -p $TMP_BUNDLE_DIR

# 
# Collect files
#

TIMESTAMP=`date +%y%m%d-%H%M%S`
if [ "$ALL" = "true" ]; then
   CLUSTERS=`ls -A $CLUSTERS_DIR`
   PODS=`ls -A $PODS_DIR`
   APPS=`ls -A $APPS_DIR`
   BUNDLE_TAR_FILE_PATH=$BUNDLE_DIR/bundle-${CLUSTER_TYPE}-${GEODE_VERSION}-all-${TIMESTAMP}.tar.gz
else
   FILE_PREFIX=""
   FILE_POSTFIX=""
   INCLUDE_CLUSTER="false"
   if ( [ "$APP_SPECIFIED" == "false" ] && [ "$POD_SPECIFIED" == "false" ] ) ||
      ( [ "$CLUSTER_SPECIFIED" == "true" ] ); then
      INCLUDE_CLUSTER="true"
   fi
   if [ "$INCLUDE_CLUSTER" == "true" ]; then
      if [ "$CLUSTER" != "" ]; then
         if  [ "`isClusterExist $CLUSTER`" == "false" ]; then 
            echo "----------------------------------------------------------------"
            echo "WORKSPACE: $GEODE_ADDON_WORKSPACE"
            echo "    ERROR: Undefined cluster: [$CLUSTER]. Command aborted."
            echo "----------------------------------------------------------------"
            exit 1
         fi
         FILE_PREFIX="cluster"
         FILE_POSTFIX=$CLUSTER
         CLUSTERS=$CLUSTER
      fi
   fi
   if [ "$POD_SPECIFIED" == "false" ]; then
      POD=""
   fi
   if [ "$POD" != "" ]; then
      if  [ "`isPodExist $POD`" == "false" ]; then 
         echo "----------------------------------------------------------------"
         echo "WORKSPACE: $GEODE_ADDON_WORKSPACE"
         echo "    ERROR: Undefined pod: [$POD]. Command aborted."
         echo "----------------------------------------------------------------"
         exit 1
      fi
      if [ "$FILE_PREFIX" != "" ]; then
         FILE_PREFIX="${FILE_PREFIX}-"
      fi
      FILE_PREFIX="${FILE_PREFIX}pod"
      if [ "$FILE_POSTFIX" != "" ]; then
         FILE_POSTFIX="${FILE_POSTFIX}-"
      fi
      FILE_POSTFIX="${FILE_POSTFIX}$POD"
     PODS=$POD
   fi
   if [ "$APP" != "" ]; then
      if  [ "`isAppExist $APP`" == "false" ]; then 
         echo "----------------------------------------------------------------"
         echo "WORKSPACE: $GEODE_ADDON_WORKSPACE"
         echo "    ERROR: Undefined app: [$APP]. Command aborted."
         echo "----------------------------------------------------------------"
         exit 1
      fi
      if [ "$FILE_PREFIX" != "" ]; then
         FILE_PREFIX="${FILE_PREFIX}-"
      fi
      FILE_PREFIX="${FILE_PREFIX}app"
      if [ "$FILE_POSTFIX" != "" ]; then
         FILE_POSTFIX="${FILE_POSTFIX}-"
      fi
      FILE_POSTFIX="${FILE_POSTFIX}$APP"
     APPS=$APP
   fi
   BUNDLE_TAR_FILE_PATH=$BUNDLE_DIR/bundle-${CLUSTER_TYPE}-${GEODE_VERSION}-${FILE_PREFIX}-${FILE_POSTFIX}-${TIMESTAMP}.tar.gz
fi

# clusters
for CLUSTER in $CLUSTERS; do
   CLUSTER_DIR=$CLUSTERS_DIR/$CLUSTER
   mkdir -p $TMP_BUNDLE_DIR/clusters/$CLUSTER

   # Copy README.md if exists
   if [ -f "$CLUSTER_DIR/README.md" ]; then
      cp $CLUSTER_DIR/README.md $TMP_BUNDLE_DIR/clusters/$CLUSTER
   fi

   # Copy pom.xml if exists
   if [ -f "$CLUSTER_DIR/pom.xml" ]; then
      cp $CLUSTER_DIR/pom.xml $TMP_BUNDLE_DIR/clusters/$CLUSTER
   fi

   # Copy bin_sh
   cp -Rf $CLUSTER_DIR/bin_sh $TMP_BUNDLE_DIR/clusters/$CLUSTER

   # Copy etc
   cp -Rf $CLUSTER_DIR/etc $TMP_BUNDLE_DIR/clusters/$CLUSTER

   # Copy lib - all but addon jars
   if [ -d $CLUSTER_DIR/lib ]; then
      mkdir -p $TMP_BUNDLE_DIR/clusters/$CLUSTER/lib
      pushd $CLUSTER_DIR/lib > /dev/null 2>&1
      FILES=`ls -A | grep -v "geode-addon-"`
      if [ "$FILES" != "" ]; then
         cp -Rf $FILES $TMP_BUNDLE_DIR/clusters/$CLUSTER/lib/
      fi
      popd > /dev/null 2>&1
   fi

   # Copy plugins - all but addon jars
   if [ -d $CLUSTER_DIR/plugins ]; then
      mkdir -p $TMP_BUNDLE_DIR/clusters/$CLUSTER/plugins
      pushd $CLUSTER_DIR/plugins > /dev/null 2>&1
      FILES=`ls -A | grep -v "geode-addon-"`
      if [ "$FILES" != "" ]; then
         cp -Rf $FILES $TMP_BUNDLE_DIR/clusters/$CLUSTER/plugins/
      fi
   fi
   
   popd > /dev/null 2>&1
done

# pods
for POD in $PODS; do
   POD_DIR=$PODS_DIR/$POD
   mkdir -p $TMP_BUNDLE_DIR/pods/$POD
   cp -f $POD_DIR/Vagrantfile $TMP_BUNDLE_DIR/pods/$POD/ > /dev/null 2>&1
   if [ -d $POD_DIR/README.md ]; then
      # README.md
      cp $POD_DIR/README.md $TMP_BUNDLE_DIR/pods/$POD/ > /dev/null 2>&1
   fi
   if [ -d $POD_DIR/bin_sh ]; then
      # bin_sh
      cp -r $POD_DIR/bin_sh $TMP_BUNDLE_DIR/pods/$POD/ > /dev/null 2>&1
   fi
   if [ -d $POD_DIR/etc ]; then
      # etc
      cp -r $POD_DIR/etc $TMP_BUNDLE_DIR/pods/$POD/ > /dev/null 2>&1
   fi
done

# apps
for APP in $APPS; do
   APP_DIR=$APPS_DIR/$APP
   if [ -d $APP_DIR ]; then
      APP="`basename $APP_DIR`"
      mkdir -p $TMP_BUNDLE_DIR/apps/$APP

      # Copy README.md if exists
      if [ -f "$APP_DIR/README.md" ]; then
         cp $APP_DIR/README.md $TMP_BUNDLE_DIR/apps/$APP/
      fi

      # Copy pom.xml if exists
      if [ -f "$APP_DIR/pom.xml" ]; then
         cp $APP_DIR/pom.xml $TMP_BUNDLE_DIR/apps/$APP/
      fi

      if [ -d $APP_DIR/bin_sh ]; then
         cp -Rf $APP_DIR/bin_sh $TMP_BUNDLE_DIR/apps/$APP/
      fi
      if [ -d $APP_DIR/bin_win ]; then
         cp $APP_DIR/bin_win $TMP_BUNDLE_DIR/apps/$APP
      fi
      if [ -d $APP_DIR/etc ]; then
         cp -Rf $APP_DIR/etc $TMP_BUNDLE_DIR/apps/$APP
      fi
      if [ -d $APP_DIR/lib ]; then
         # Copy all but addon jars
         mkdir -p $TMP_BUNDLE_DIR/apps/$APP/lib
         pushd $APP_DIR/lib > /dev/null 2>&1
         FILES=`ls -A | grep -v "geode-addon-"`
         if [ "$FILES" != "" ]; then
            cp -Rf $FILES $TMP_BUNDLE_DIR/apps/$APP/lib/
         fi
         popd > /dev/null 2>&1
      fi
      if [ -d $APP_DIR/plugins ]; then
         # Copy all but addon jars
         mkdir -p $TMP_BUNDLE_DIR/apps/$APP/plugins
         pushd $APP_DIR/plugins > /dev/null 2>&1
         FILES=`ls -A | grep -v "geode-addon-"`
         if [ "$FILES" != "" ]; then
            cp -Rf FILES $TMP_BUNDLE_DIR/apps/$APP/plugins/
         fi
         popd > /dev/null 2>&1
      fi
      if [ -d $APP_DIR/export ]; then
         cp -Rf $APP_DIR/export $TMP_BUNDLE_DIR/apps/$APP
      fi
   fi
done

#
# Create tar ball
#
if [ "$QUIET" == "true" ]; then
   tar -C $TMP_BUNDLE_DIR -czf $BUNDLE_TAR_FILE_PATH `ls -A $TMP_BUNDLE_DIR`
else
   echo ""
   echo "Creating a tar ball with the following files..."
   tar -C $TMP_BUNDLE_DIR -czvf $BUNDLE_TAR_FILE_PATH `ls -A $TMP_BUNDLE_DIR`
fi

#
# Display bundle info
#
echo "     WORKSPACE: $GEODE_ADDON_WORKSPACE"
echo "Bundle Created:"
echo "   $BUNDLE_TAR_FILE_PATH"
echo ""
