#!/usr/bin/env bash 

SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
. $SCRIPT_DIR/.addonenv.sh

EXECUTABLE="`basename $0`"

__options()
{
   echo "-docker -host -port -cluster -count -?"
}

if [ "$OPTIONS" == "true" ]; then
   __options
   exit
fi

# Get the host IP. Last IPv4 in the list.
for i in $(getHostIPv4List); do
   HOST_IP=$i
done

if [ "$HELP" == "true" ]; then
cat <<EOF

WORKSPACE
   $GEODE_ADDON_WORKSPACE

NAME
   $EXECUTABLE - Create a Docker environment in the current geode-addon workspace

SYNOPSIS
   $EXECUTABLE [-docker compose] [-host host_ip] [-port first_locator_port_number]
               [-count member_count] -cluster cluster_name [-?]

DESCRIPTION
   Creates a Docker environment that includes Geode cluster configuration files for
   one of the following Docker tools:
 
   compose  docker-compose Dockfile based cluster orchestration

   To use the created environment, you must have the specified Docker tool installed.

OPTIONS
   -docker compose
             Docker compose driven Geode cluster.

   -host host_ip
             Host IP address that is acccessible from the Docker containers. If this option
             is not specified then the IP address of the host name is assigned. If the host
             is running Docker Desktop, then you may specify the the host name, host.docker.internal,
             which resolves to the internal IP address used by the host. Note that host.docker.internal
             is for development only and not for production.

   -port first_locator_port_number
             First locator port number. Port number is incremented
             starting from this port number for the subsquent locators.
             The port number difference between the default locator port
             number and the specified port number is added to the default
             port numbers of other components. For example, if the port
             number 10336 is specified then the difference of 2 (10336-$DEFAULT_LOCATOR_START_PORT)
             is added to the member's default port number of $DEFAULT_MEMBER_START_PORT
             to obtain the port number 40406 for the member's first port number.
             Similarly, the JMX Manager's first HTTP port number would be 7072 ($DEFAULT_JMX_MANAGER_HTTP_START_PORT+2).
             Default: $DEFAULT_LOCATOR_START_PORT 

   -count member_count
             Number of members (servers) in the cluster. Default: 2

   -cluster cluster_name
             Required Geode cluster name. This name is used to create a Docker compose project,
             for example.

EOF
if [ "$MAN_SPECIFIED" == "false" ]; then
cat <<EOF
DEFAULT
   $EXECUTABLE -docker $DEFAULT_DOCKER -host $HOST_IP -port $DEFAULT_MEMBER_START_PORT -cluster cluster_name

EXAMPLES
   To create 'mydocker' cluster with the host IP 'host.docker.internal':
      $EXECUTABLE -host host.docker.internal -cluster mydocker

   To create 'mydocker' cluster with the host IP '$HOST_IP' and member (server) count of 4:
      $EXECUTABLE -host $HOST_IP -cluster mydocker -count 4

   To create 'mydocker' cluster with the host IP '$HOST_IP':
      $EXECUTABLE -host $HOST_IP -cluster mydocker

FILES
   $GEODE_ADDON_WORKSPACE/docker
             The current workspace Docker directory.

EOF
fi
   exit
fi

if [ "$CLUSTER_SPECIFIED" == "false" ]; then
   >&2 echo "ERROR: The -cluster option is not specified. Command aborted."
   exit 1
fi

if [ "$DOCKER" == "" ]; then
   DOCKER=$DEFAULT_DOCKER
fi
if [ "$DOCKER" != "compose" ]; then
   >&2 echo "ERROR: Unsupported Docker tool [$DOCKER]. Please use the '-?' option to see the usage. Command aborted."
   exit 1
fi
if [ "$COUNT" == "" ]; then
   COUNT=2
fi
if [ $COUNT -lt 1 ]; then
   >&2 echo "ERROR: Inalid count [$COUNT]. Member (server) count cannot be less than 1. Command aborted."
   exit 1
fi


if [ "$HOST" != "" ]; then
   HOST_IP=$HOST
fi

#
# docker directory
#
DOCKER_DIR=$GEODE_ADDON_WORKSPACE/docker
CLUSTER_DIR=$DOCKER_DIR/$CLUSTER

if [ -d $CLUSTER_DIR ]; then
   >&2 echo "ERROR: The specified Docker cluster exists. Command aborted."
   exit
fi
   

if [ ! -d $CLUSTER_DIR ]; then
   mkdir -p $CLUSTER_DIR
fi

if [ "$DOCKER" == "compose" ]; then

   mkdir -p $CLUSTER_DIR/geode-addon/etc
   ETC_DIR=$CLUSTER_DIR/geode-addon/etc
   LIB_DIR=$CLUSTER_DIR/geode-addon/lib
   PLUGINS_DIR=$CLUSTER_DIR/geode-addon/plugins
   DOCKER_DOC="README.md"

   # Copy Docker doc
   cp $BASE_DIR/docker/compose/$DOCKER_DOC $CLUSTER_DIR
   # Copy the template gemfire.properties file
   cp $BASE_DIR/etc/template-gemfire.properties $ETC_DIR/gemfire.properties
   # Copy the template cache.xml file
   cp $BASE_DIR/etc/template-cache.xml $ETC_DIR/cache.xml
   # Copy the template log4j2.properties file
   cp $BASE_DIR/etc/template-log4j2.properties $ETC_DIR/log4j2.properties
   # Copy the template prometheus config file
   cp $BASE_DIR/etc/template-prometheus.yml $ETC_DIR/prometheus.yml
   # Copy the template hibernate config file
   cp $BASE_DIR/etc/template-hibernate.cfg-mysql.xml $ETC_DIR/hibernate.cfg-mysql.xml
   cp $BASE_DIR/etc/template-hibernate.cfg-postgresql.xml $ETC_DIR/hibernate.cfg-postgresql.xml

   # Copy binary files
   cp -r $BASE_DIR/lib $LIB_DIR
   cp -r $BASE_DIR/plugins $PLUGINS_DIR

   # Update .env file
   if [ "$PORT_ARG" != "" ]; then
      START_PORT=$PORT_ARG
   else
      START_PORT=$DEFAULT_LOCATOR_START_PORT
   fi
   LOCATOR_PORT=$START_PORT
   sed -e "s/\${HOSTNAME_FOR_CLIENTS}/$HOST_IP/g" \
       -e "s/\${CLUSTER_NAME}/$CLUSTER/g" \
       $BASE_DIR/docker/compose/template-env > $CLUSTER_DIR/.env

   # Update docker-compose.yaml
   sed -e "s/\${LOCATOR_PORT}/$LOCATOR_PORT/g" \
       $BASE_DIR/docker/compose/template-docker-compose.yaml > $CLUSTER_DIR/docker-compose.yaml

   # Append server services to docker-compose.yaml
   let DIFF_PORT=LOCATOR_PORT-DEFAULT_LOCATOR_START_PORT
   let SERVER_PORT=DEFAULT_MEMBER_START_PORT+DIFF_PORT
   for i in $(seq 1 $COUNT); do   
      SERVER_NAME="server$i"
      sed -e "s/\${SERVER_NAME}/$SERVER_NAME/g" -e "s/\${SERVER_PORT}/$SERVER_PORT/g" $BASE_DIR/docker/compose/template-server-docker-compose.yaml >> $CLUSTER_DIR/docker-compose.yaml
      let SERVER_PORT=SERVER_PORT+1
   done

fi

#
# Display DOCKER Environment
#
echo ""
echo "         WORKSPACE: $GEODE_ADDON_WORKSPACE"
echo "            Docker: $DOCKER"
echo "Docker Environment:"
echo "   $CLUSTER_DIR"

cat <<EOF

$CLUSTER
├── .env
├── README.md
├── docker-compose.yaml
└── geode-addon
    ├── etc
    ├── lib
    └── plugins

EOF
echo -e "Please follow the instructions in the ${CLightGreen}$DOCKER_DOC${CNone} document."
echo -e "  - Change environment variables in the ${CLightGreen}.env${CNone} file as needed."
echo -e "  - Configure locator(s) and servers (members) as needed in the ${CLightGreen}docker-compose.yaml${CNone} file as needed."
echo "To start Docker cluster:"
echo -e "   ${CLightGreen}cd_docker $CLUSTER${CNone}"
echo -e "   ${CLightGreen}docker-compose up${CNone}"
echo ""

