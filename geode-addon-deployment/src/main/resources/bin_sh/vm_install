#!/usr/bin/env bash

SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
. $SCRIPT_DIR/.addonenv.sh

EXECUTABLE="`basename $0`"

__options()
{
   echo "-java -geode -vm -key -?"
}

if [ "$OPTIONS" == "true" ]; then
   __options
   exit
fi

#
# Determeint $TAR_BALL_PATH
#
ROOT_DIR_NAME=$(basename $BASE_DIR)
TOP_DIR="$(dirname "$BASE_DIR")"
TAR_BALL_GZ_NAME=$ROOT_DIR_NAME.tar.gz
TAR_BALL_GZ_PATH=$BASE_DIR/bundles/$TAR_BALL_GZ_NAME

if [ "$HELP" == "true" ]; then
cat <<EOF

WORKSPACE
   $GEODE_ADDON_WORKSPACE

NAME
   $EXECUTABLE - Install Geode/GemFire and Java remotely on the workspace VMs

SYNOPSIS
   $EXECUTABLE [-vm comma_separated_hosts] [-key private_key_file] 
               [-java jdk_distribution_file]
               [-geode imdg_or_jet_distribution_file]
               [-?]

DESCRIPTION
  Installs the specified Geode and/or Java remotely on the workspace VMs.

  If the '-vm' option is not specified, then it installs the specified file(s) to
  the hosts defined by the VM_HOSTS environment variable in the workspace 'setenv.sh'
  file.

OPTIONS

    -vm comma_separated_hosts
              A list of VM hosts or addresses separated by comma. Spaces NOT allowed.

    -key private_key_file
              Private key file path. To ssh into your VM such as the ones on AWS, you may
              supply your private key file. Normally, the private key file is not
              required if you have set public-key authentication.

    -java java_distribution_file
              JDK distribution file, e.g. jdk-8u212-linux-x64.tar.gz

    -geode imdg_or_jet_distribution_file
              Geode distribution file, e.g. geode-enterprise-3.12.5.tar.gz.

EOF
if [ "$MAN_SPECIFIED" == "false" ]; then
cat <<EOF
DEFAULT
   $EXECUTABLE -cluster $CLUSTER file_path
EOF
fi
cat <<EOF

SEE ALSO
EOF
   printSeeAlsoList "vm_*" $EXECUTABLE
   exit
fi

# Replace , with space
__VM_HOSTS=$(echo "$VM_HOSTS" | sed "s/,/ /g")
DEFAULT_USER=$(whoami)
VM_USER=`getClusterProperty "vm.user" "$DEFAULT_USER"`

if [ "$KEY" == "" ]; then
   KEY=`getClusterProperty "vm.privateKeyFile"`
fi
VM_KEY=""
if [ "$KEY" != "" ]; then 
   if [ ! -f "$KEY" ]; then
      echo >&2 "ERROR: Specified private key does not exist [$KEY]."
      echo >&2 "       Command aborted."
      exit 1
   fi
   VM_KEY="-i $KEY"
fi

# Determine all VMs that do not have Java and Geode installed.
JAVA_HOME_COMMAND="if [ -d "$VM_JAVA_HOME" ]; then echo true; else echo false; fi"
GEODE_HOME_COMMAND="if [ -d "$VM_GEODE_HOME" ]; then echo true; else echo false; fi"
JAVA_HOME_NOT_FOUND_LIST=""
GEODE_HOME_NOT_FOUND_LIST=""
for VM_HOST in $__VM_HOSTS; do
   JAVA_HOME_EXISTS=$(ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no "$JAVA_HOME_COMMAND")
   GEODE_HOME_EXISTS=$(ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no "$GEODE_HOME_COMMAND")
   if [ "$JAVA_HOME_EXISTS" == "false" ]; then
      JAVA_HOME_NOT_FOUND_LIST="$JAVA_HOME_NOT_FOUND_LIST $VM_HOST"
   fi
   if [ "$GEODE_HOME_EXISTS" == "false" ]; then
      GEODE_HOME_NOT_FOUND_LIST="$GEODE_HOME_NOT_FOUND_LIST $VM_HOST"
   fi
done

echo ""
PRIVATE_KEY_FILE_NAME=$(basename $VM_PRIVATE_KEY_FILE)
REMOTE_VM_KEY=$VM_GEODE_ADDON_WORKSPACE/$PRIVATE_KEY_FILE_NAME

#
# Installs the product defined by the following variables
#
# @required PRODUCT
# @required PRODUCT_HOME_NOT_FOUND_LIST
# @required PRODUCT_PATH
# @required VM_PRODUCT_HOME
#
function installProduct
{
   if [ "$PRODUCT_HOME_NOT_FOUND_LIST" == "" ]; then
      echo "$PRODUCT already installed on all VMs."
   else

      if [ ! -f "$PRODUCT_PATH" ]; then
         echo >&2 "ERROR: Invalid path [$PRODUCT_PATH]."
         echo >&2 "       Command aborted."
         exit 1
      fi

      echo "$PRODUCT installation"

      local __PRODUCT_DIST_FILE_NAME=$(basename $PRODUCT_PATH)
      local __PRODUCT_PARENT_PATH="$(dirname "$VM_PRODUCT_HOME")"
      local __PRODUCT_COMMAND="if [ -f "/tmp/$__PRODUCT_DIST_FILE_NAME" ]; then echo true; else echo false; fi"

      # Determine the first VM that has product distribution file
      BASE_VM=""
      for VM_HOST in $__VM_HOSTS; do
         __PRODUCT_EXISTS=$(ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no "$__PRODUCT_COMMAND")
         if [ "$__PRODUCT_EXISTS" == "true" ]; then
            BASE_VM=$VM_HOST
	    break
         fi
      done

      if [ "$BASE_VM" == "" ]; then
         for VM_HOST in $PRODUCT_HOME_NOT_FOUND_LIST; do
            echo "   Installing $VM_HOST..."
            BASE_VM=$VM_HOST
            break
         done
	 # Upload to the base VM
         scp -q -r -o stricthostkeychecking=no $VM_KEY $PRODUCT_PATH $VM_USER@$BASE_VM:/tmp/
      fi

      for VM_HOST in $PRODUCT_HOME_NOT_FOUND_LIST; do
         if [ "$VM_HOST" != "$BASE_VM" ]; then
            echo "   Installing $VM_HOST..."
            # Copy from the base VM
            ssh -q -n $VM_KEY $VM_USER@$BASE_VM -o stricthostkeychecking=no "scp -o stricthostkeychecking=no -i $REMOTE_VM_KEY /tmp/$__PRODUCT_DIST_FILE_NAME $VM_USER@$VM_HOST:/tmp/"
         fi
	 # Install
         ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no "tar -C $__PRODUCT_PARENT_PATH/ -xzf /tmp/$__PRODUCT_DIST_FILE_NAME"

	 # Remove
         #ssh -q -n $VM_KEY $VM_USER@$VM_HOST -o stricthostkeychecking=no "rm /tmp/$__PRODUCT_DIST_FILE_NAME"
      done

      echo "$PRODUCT installation complete."
   fi
   echo ""
}

# Install Java
if [ "$JAVA_HOME_ARG" != "" ]; then
   
   # Arguments to installProduct function
   PRODUCT="Java"
   PRODUCT_HOME_NOT_FOUND_LIST=$JAVA_HOME_NOT_FOUND_LIST
   PRODUCT_PATH=$JAVA_HOME_ARG
   VM_PRODUCT_HOME=$VM_JAVA_HOME
   
   installProduct
fi

# Install Geode
if [ "$GEODE_ARG" != "" ]; then
   # Arguments to installProduct function
   PRODUCT="Goede"
   PRODUCT_HOME_NOT_FOUND_LIST=$GEODE_HOME_NOT_FOUND_LIST
   PRODUCT_PATH=$GEODE_ARG
   VM_PRODUCT_HOME=$VM_GEODE_HOME
   
   installProduct
fi

echo "Run 'vm_test' to check installation and configuration status."
echo ""
